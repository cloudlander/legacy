
// ------------------- 文件系统项目计划及编码规范 ----------------

// 人员组成	： 张晓珉  林啸  郑奕  庄子明

// 分工	(负责人)	： 项目计划统筹 -- 庄子明
		   
		   Coding     -- 所有人

		   文档整理    -- 郑奕

		   项目测试    -- 张晓珉  林啸

// 时间进度	： a) -- 12.9. :  项目策划完成
  
                                  目的要求： 各人明确自己具体分工， 对整个系统的架构有明确的认识

                   b) 12.10. -- 12.16.:  底层结构及IO操作完成 (12.17.全体成员吃火锅一次讨论问题：)

		                  目的要求： 系统完成至除去dir(),cat()等一系列功能之外的所有功能
				
		   c) 12.18. -- 12.22.:  文件系统面向用户功能完成 (12.23.全体成员聚餐一次讨论问题：)

		                  目的要求： 系统基本完成，着手编写面向用户的界面

	           d) 12.24. -- 12.29.:  编写文档， Debug

				  目的要求： 系统完成，文档编写及debug工作完成

// 项目名称:  Z^3L File System (暂定)

// 项目基本架构：    @NA

// 编码规范：

   1. 编码环境：   VC++ 6.0 

   2. 编译环境：   VC++ 6.0  Console Project

   3. 所用语言：   C++

                  要求用类/对象/标准输入输出 (iostream)

		  所有*.cpp放在Work Space的source files下， 所有的*.h放在项目的header files下 

   4. 注解   ：    所有注解统一用中文书写 (可以考虑在项目完成后全部改为english:)

                  所有单行注解统一用 // , 多行注解可以考虑用 /* */ 

                  尽量保持程序体内的代码直接可读性，减少内部代码的注解

		  文件头注解:

		  /////////////////////////////////
		  // 文件名：
		  // 创建者：
		  // 时间：
		  // 内容：
		  // 修改： (包括修改时间，修改者，修改内容)
		  /////////////////////////////////

		  函数注解：

		  /////////////////////////////////
		  // 函数名：
		  // 功能：
		  // 输入：
		  // 输出：
		  // 返回值： (包括其意义)
		  // 备注：
		  ////////////////////////////////

		  (函数如果是功能比较简单的，至少应该有一行/////// 分隔符 和 一行功能的说明)

		  各名项目成员各自代码的注解： 

          	  在注解后面加上 @Your_Name (方便查找及修改)

		  在没有确定或者在读代码时对别人的代码有疑问： 在代码处用 // @NA 标注

// 代码命名：      

   1. 变量名命名:		m_  类成员变量

                        g_  全局变量 (不建议使用)

			c   char
			s   short
			b   boolean
			i   int
			l   long
			str string
			p   pointer

			*Example: m_strDirName

  2. 函数命名：          尽量使其功能可以从命名上看出来

			布尔变量函数建议用Is开头 (e.g. IsWriting())

  3. 自定义数据变量：     C   类前缀  (e.g. CDir)

                        S   结构前缀 (e.g. SDirInfo)

// 代码注意事项：

  1. 注意动态分配数据项的初始化与回收：  统一用new/delete/delete[] 

  2. 注意各个成员对象的构造函数和析构函数内容：  析构函数统一说明为virtual类型，保证能被正确的this对象调用

  3. 类的声明(变量及函数声明)在.h中， 类的定义(实现代码)在.cpp中.

  4. 访问控制在每个类中以public, protected, private顺序出现.

     public -- 所有**可见

     protected -- 所有派生类及友类可见，本身对象可见

     private -- 所有对象可见，派生类不可见

     (建议为避免错误， 只使用public作为全局可见的类的外部接口， private作为你不想别人访问的变量/功能)

  5. 函数一定要返回一个值，用return. 至少返回1/0以帮助debug.

  6. 引用VFS File时使用相对路径(这一点很重要!!!)，保证项目结合时各人所写的代码可以无错融合.


										庄子明
										2001-12-9
